- name: Create directories for Prometheus
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ system_user }}"
    group: "{{ system_user }}"
  with_items:
    - /opt/tools/prometheus
    - /opt/tools/prometheus/data
    - /opt/tools/prometheus/rules

- name: Create Prometheus configuration
  copy:
    content: |
      global:
        scrape_interval: 15s
        evaluation_interval: 15s
      alerting:
        alertmanagers:
          - static_configs:
              - targets:
                - localhost:9093
      rule_files:
        - /etc/prometheus/rules/*.yml
      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
        - job_name: 'node-exporter'
          static_configs:
            - targets: ['localhost:9100']
        - job_name: 'cadvisor'
          static_configs:
            - targets: ['localhost:8080']
        - job_name: 'kubernetes-apiservers'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: endpoints
          relabel_configs:
            - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
              action: keep
              regex: default;kubernetes;https
        - job_name: 'kubernetes-nodes'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
            - role: node
          relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/${1}/proxy/metrics
    dest: /opt/tools/prometheus/prometheus.yml
    owner: "{{ system_user }}"
    group: "{{ system_user }}"

- name: Create alert rules
  copy:
    content: |
      groups:
        - name: instance
          rules:
            - alert: InstanceDown
              expr: up == 0
              for: 5m
              labels:
                severity: critical
              annotations:
                summary: "Instance {{ $labels.instance }} down"
                description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."
            
            - alert: HighMemoryUsage
              expr: (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes) * 100 < 10
              for: 5m
              labels:
                severity: warning
              annotations:
                summary: "High memory usage on {{ $labels.instance }}"
                description: "Memory available is less than 10% on {{ $labels.instance }}"
            
            - alert: HighCPUUsage
              expr: (1 - avg(irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100 > 80
              for: 5m
              labels:
                severity: warning
              annotations:
                summary: "High CPU usage on {{ $labels.instance }}"
                description: "CPU usage is above 80% on {{ $labels.instance }} for 5 minutes"
            
            - alert: DiskSpaceRunningOut
              expr: (node_filesystem_avail_bytes{mountpoint="/"} / node_filesystem_size_bytes{mountpoint="/"}) * 100 < 15
              for: 5m
              labels:
                severity: warning
              annotations:
                summary: "Disk space running out on {{ $labels.instance }}"
                description: "Disk space on {{ $labels.instance }} is less than 15% available"
            
            - alert: ApplicationDown
              expr: up{job="django-app"} == 0
              for: 2m
              labels:
                severity: critical
              annotations:
                summary: "Django application down on {{ $labels.instance }}"
                description: "Django application is not responding on {{ $labels.instance }}"
            
            - alert: HighResponseTime
              expr: http_request_duration_seconds_count{job="django-app"} > 2
              for: 5m
              labels:
                severity: warning
              annotations:
                summary: "High response time on {{ $labels.instance }}"
                description: "Response time is above 2 seconds on {{ $labels.instance }}"
    dest: /opt/tools/prometheus/rules/alerts.yml
    owner: "{{ system_user }}"
    group: "{{ system_user }}"

- name: Create monitoring docker-compose
  copy:
    content: |
      version: '3.8'
      services:
        prometheus:
          image: prom/prometheus:latest
          ports:
            - "9090:9090"
          volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
            - ./data:/prometheus
            - ./rules:/etc/prometheus/rules
          command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
          restart: unless-stovery
        
        node-exporter:
          image: prom/node-exporter:latest
          ports:
            - "9100:9100"
          volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
          command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.ignored-mount-points'
            - '^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
          restart: unless-stovery
        
        cadvisor:
          image: gcr.io/cadvisor/cadvisor:latest
          ports:
            - "8080:8080"
          volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
          restart: unless-stovery
        
        alertmanager:
          image: prom/alertmanager:latest
          ports:
            - "9093:9093"
          volumes:
            - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
          command:
            - '--config.file=/etc/alertmanager/alertmanager.yml'
            - '--storage.path=/alertmanager'
          restart: unless-stovery
    dest: /opt/tools/prometheus/docker-compose.yml
    owner: "{{ system_user }}"
    group: "{{ system_user }}"

- name: Create Alertmanager configuration for Slack
  copy:
    content: |
      global:
        slack_api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'
      route:
        group_by: ['alertname']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 1h
        receiver: 'slack-notifications'
      receivers:
        - name: 'slack-notifications'
          slack_configs:
            - channel: '#alerts'
              send_resolved: true
              title: '{{ range .Alerts }}{{ .Annotations.summary }}{{ end }}'
              text: |-
                {{ range .Alerts }}
                *Alert:* {{ .Annotations.summary }}
                *Description:* {{ .Annotations.description }}
                *Severity:* {{ .Labels.severity }}
                *Instance:* {{ .Labels.instance }}
                *Time:* {{ .StartsAt }}
                {{ end }}
    dest: /opt/tools/prometheus/alertmanager.yml
    owner: "{{ system_user }}"
    group: "{{ system_user }}"

- name: Start monitoring stack
  command: docker-compose up -d
  args:
    chdir: /opt/tools/prometheus
  become: yes
